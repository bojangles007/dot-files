#+STARTUP: showall
#+TITLE: OfflineIMAP Setup
#+AUTHOR: Stig Brautaset
* Introduction

  Startup used to be /slooooow/ with two remote IMAP accounts, so I started
  using [[Http://www.offlineimap.org][OfflineIMAP]]. You can set it up to sync multiple accounts, either to a
  local Maildir, or you can sync two IMAP accounts. Most reports didn't have
  many nice things to say about Gnus' native Maildir support, so I went with
  IMAP.

  I use [[http://www.dovecot.org][Dovecot]] for the IMAP server. I have /two/ local IMAP boxes, and I
  didn't really want to try setting up Dovecot to serve both. (Actually, I
  didn't want it running at all most of the time.) The good thing is both Gnus
  and OfflineIMAP can launch [[http://www.dovecot.org][Dovecot]] on demand. Score!

* Installation

  Both OfflineIMAP and Dovecot can be installed with homebrew:

  #+BEGIN_SRC sh
    brew install offlineimap dovecot
  #+END_SRC

* Configuration

  I'm just going to leave this here for now. Check out the OfflineIMAP
  documentation for details. It was pretty good, IIRC.

  First we define some shared account options. I want autorefresh for all
  accounts. Let's do 10 quick checks before a full one. Wait 5 minutes between
  each attempt at autorefresh.

  #+name: shared-account-opts
  #+BEGIN_SRC conf
    maxconnections = 3
  #+END_SRC

  #+BEGIN_SRC conf :tangle ~/.offlineimaprc :noweb yes
    [general]
    accounts = Play,Work
    pythonfile = ~/.offlineimap.py
    maxsyncaccounts = 3

    [Account Play]
    localrepository = PlayLocal
    remoterepository = PlayRemote
    <<shared-account-opts>>

    [Repository PlayLocal]
    type = IMAP
    preauthtunnel = /usr/local/opt/dovecot/libexec/dovecot/imap -o mail_location=maildir:~/Mail/Play

    [Repository PlayRemote]
    type = IMAP
    remotehost = imap.mail.me.com
    remoteuser = stig.brautaset
    remotepasseval = get_password_emacs("imap.mail.me.com", "imaps")
    sslcacertfile = /usr/local/etc/openssl/cert.pem

    [Account Work]
    localrepository = WorkLocal
    remoterepository = WorkRemote
    <<shared-account-opts>>

    [Repository WorkLocal]
    type = IMAP
    preauthtunnel = /usr/local/opt/dovecot/libexec/dovecot/imap -o mail_location=maildir:~/Mail/Work

    [Repository WorkRemote]
    type = Gmail
    remoteuser = sbrautaset@laterpay.ag
    remotepasseval = get_password_emacs("imap.gmail.com", "imaps")
    sslcacertfile = /usr/local/etc/openssl/cert.pem
    folderfilter = lambda foldername: foldername not in ['[Gmail]/Starred', '[Gmail]/Important']
  #+END_SRC

  The dovecot config file has to exist, but we don't care about what's in it.

  #+BEGIN_SRC conf :tangle /usr/local/etc/dovecot/dovecot.conf
  #+END_SRC

** Get Password from Emacs' .authinfo.gpg

   Ideally we would get passwords from Emacs. I already have to type my
   password to decrypt authinfo.gpg when starting Gnus, so it would be great
   if offlineimap.el could use that too.

   #+BEGIN_SRC python :tangle ~/.offlineimap.py
     import subprocess
     def get_output(cmd):
       # Bunch of boilerplate to catch the output of a command:
       pipe = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
       (output, errout) = pipe.communicate()
       assert pipe.returncode == 0 and not errout
       return output
     def get_password_emacs(host, port):
       cmd = "emacsclient --eval '(offlineimap-get-password \"%s\" \"%s\")'" % (host,port)
       return get_output(cmd).strip().lstrip('"').rstrip('"')
   #+END_SRC
