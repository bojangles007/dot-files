* How I Setup My Environment
  :PROPERTIES:
  :header-args:sh: :results output silent
  :END:

  This repo contains my dotfiles. I used to keep them in app-specific repos,
  e.g. [[http://github.com/stig/.zsh.d][.zsh.d]] and [[http://github.com/stig/.emacs.d][.emacs.d]], but it got a bit tiresome.

** Clone =Dotfiles=

   I start by cloning the current version of my configuration files.

   #+BEGIN_SRC sh
   git clone git@github.com:stig/dot-files.git ~/Dotfiles
   #+END_SRC

** Homebrew

   First install [[brew.sh][brew]]:

   #+BEGIN_SRC sh
   ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
   #+END_SRC

** Install & Set up Emacs

   Link to our current dotfiles for Emacs:

   #+BEGIN_SRC sh
     test -L ~/.emacs.d && rm ~/.emacs.d
     ln -s ~/Dotfiles/emacs.d $target
   #+END_SRC

   Then use homebrew to install Emacs:

   #+BEGIN_SRC sh
     brew install emacs --with-cocoa
   #+END_SRC

*** Editorconfig

    Some projects I touch, particularly at work, use [[http://editorconfig.org][editorconfig]] to set up
    their indentation and file format preferences. Emacs supports this, but
    requires an external tool to help, so let's get that:

    #+BEGIN_SRC sh
      brew install editorconfig
    #+END_SRC

*** Ag / The Silver Searcher

    I use =ag= for searching quite a lot in Emacs. This requires an additional
    external tool for best performance:

    #+BEGIN_SRC sh
      brew install the_silver_searcher
    #+END_SRC

*** Aspell with UK English Dictionary

    I only care about the Queen's English for spell checking:

    #+BEGIN_SRC sh
      brew install aspell --with-lang-uk
    #+END_SRC

*** Leiningen

    This is used by Cider. Installed with brew, of course:

    #+BEGIN_SRC sh
      brew install leiningen
    #+END_SRC

*** Fix "weird characters" in =ansi-term= mode

    For some reason Emacs' =ansi-term= mode displays some "weird characters".
    To fix this, copy [[https://gist.github.com/stig/0c8bc5aeb8602cdb45de#file-ansi-term-ti][ansi-term.ti]] to somewhere locally and run =tic= on it to
    create =.terminfo=:

    #+BEGIN_SRC sh
    curl 'https://gist.githubusercontent.com/stig/0c8bc5aeb8602cdb45de/raw/e20e6fb0a0d937b51dfdd4107053ac0b140efb2c/ansi-term.ti' > /tmp/ansi-term.ti
    tic -o ~/.terminfo /tmp/ansi-term.ti
    #+END_SRC

*** Trash

    This allows moving files to trash rather than deleting them from =dired=.
    I find that handy.

    #+BEGIN_SRC sh
    brew install trash
    #+END_SRC

** The Friendly Interactive Shell

   I'm experimenting with [[http://fishshell.com/docs/current/tutorial.html][fish]] as my login shell. On a new machine, I first
   set up a link to my =fish= dotfiles:

   #+BEGIN_SRC sh
     mkdir -p ~/.config
     test -L ~/.config/fish && rm ~/.config/fish
     ln -s ~/Dotfiles/fish ~/.config/fish
   #+END_SRC

   Then we install =fish= itself via brew:

   #+BEGIN_SRC sh
     brew install fish
   #+END_SRC

   Tediously we have to add its full path (=/usr/local/bin/fish=) to =/etc/shells=
   to allow us to use it as a login shell:

   #+BEGIN_SRC sh
        cat <<EOF | sudo patch /etc/shells
     10a11
      > /usr/local/bin/fish
      EOF
   #+END_SRC

   Finally we have to remember to actually change our login shell:

   #+BEGIN_SRC sh
     chsh -s /usr/local/bin/fish
   #+END_SRC

** Cluster SSH

   This requires a bit of hackery until [[https://github.com/brockgr/csshx/pull/77][my patch to make csshx behave in Zsh]]
   is merged.

   First we tell =csshx= to look for clusters in =~/.clusters=:

   #+BEGIN_SRC sh
     touch ~/.clusters
     test -f ~/.csshxrc && mv ~/.csshxrc{,.orig}
     echo 'extra_cluster_file=~/.clusters' > ~/.csshxrc
   #+END_SRC

   Then we install it from my own hacked repo:

   #+BEGIN_SRC sh
     brew install https://raw.github.com/stig/dot-files/master/csshx/csshx.rb --HEAD
   #+END_SRC

** DONE .gitconfig

   Set up my basic details:

   #+BEGIN_SRC sh
     git config --global user.name "Stig Brautaset"
     git config --global user.email "stig@brautaset.org"
   #+END_SRC

   I like coloured output, particularly for diffs, thank you very much. I'm
   not entirely sure which of these actually does it though:

   #+BEGIN_SRC sh
     git config --global ui.color true
     git config --global color.ui true
   #+END_SRC

   Git aliases? I has them! I used to have more, for example =git co= as
   abbreviation for =git commit=, but since I moved to use [[http://magit.vc][Magit]] I don't need
   them any more. I've kept a few mainly for "sentimental reasons" though.

   #+BEGIN_SRC sh
     git config --global alias.lg "!git log-pretty --graph"
     git config --global alias.l "!log pretty"
     git config --global alias.log-pretty "log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
   #+END_SRC

   This alias I used for a while when creating the release notes for [[http://sbjson.org][SBJson]].
   It creates nice output for pasting into a Markdown document, for each
   commit. It is mainly suitable if you cultivate a carefully manicured git
   history. You can invoke it like =git sbjsonlog v4.0.0..v4.0.1=:

   #+BEGIN_SRC sh
      git config --global alias.sbjsonlog "log '--format=format:* [`%h`](https://github.com/stig/json-framework/commit/%H) %s'"
   #+END_SRC

   I like the "simple" style of push, where branches are assumed to be named
   similarly to upstream. This is the default in Git above version 2.0, I
   believe, but I'll leave this here for a little bit, in case I need it.

   #+BEGIN_SRC sh
     git config --global push.default simple
   #+END_SRC

** TODO .gemrc

** TODO =.lein=
