* How I Setup My Environment
  :PROPERTIES:
  :header-args:sh: :results output silent
  :END:

  This repo contains my dotfiles. I used to keep them in app-specific repos,
  e.g. [[http://github.com/stig/.zsh.d][.zsh.d]] and [[http://github.com/stig/.emacs.d][.emacs.d]], but it got a bit tiresome.

  This file has lots of code snippets to run, and some full config file
  snippets. To run the code samples from Emacs, if you have =org-babel=
  installed, simply position the cursor in the sample and press =C-c C-c=. For
  the ones that are expected to be [[http://orgmode.org/manual/tangle.html][tangled in place]], position the cursor in
  the config snippet and hit =C-c C-v t=.

** Clone =Dotfiles=

   I start by cloning the current version of my configuration files.

   #+BEGIN_SRC sh
   git clone git@github.com:stig/dot-files.git ~/Dotfiles
   #+END_SRC

** Homebrew

   First install [[brew.sh][brew]]:

   #+BEGIN_SRC sh
   ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
   #+END_SRC

** Install & Set up Emacs

   Link to our current dotfiles for Emacs:

   #+BEGIN_SRC sh
     test -L ~/.emacs.d && rm ~/.emacs.d
     test -d ~/.emacs.d && mv ~/.emacs.d ~/.emacs.d.$(date +%s)
     ln -s ~/Dotfiles/emacs.d ~/.emacs.d
   #+END_SRC

   Then use homebrew to install Emacs:

   #+BEGIN_SRC sh
     brew install emacs --with-cocoa
   #+END_SRC

*** Editorconfig

    Some projects I touch, particularly at work, use [[http://editorconfig.org][editorconfig]] to set up
    their indentation and file format preferences. Emacs supports this, but
    requires an external tool to help, so let's get that:

    #+BEGIN_SRC sh
      brew install editorconfig
    #+END_SRC

*** Ag / The Silver Searcher

    I use =ag= for searching quite a lot in Emacs. This requires an additional
    external tool for best performance:

    #+BEGIN_SRC sh
      brew install the_silver_searcher
    #+END_SRC

*** Aspell with UK English Dictionary

    I only care about the Queen's English for spell checking:

    #+BEGIN_SRC sh
      brew install aspell --with-lang-uk
    #+END_SRC

*** Leiningen

    This is used by Cider. Installed with brew, of course:

    #+BEGIN_SRC sh
      brew install leiningen
    #+END_SRC

*** Fix "weird characters" in =ansi-term= mode

    For some reason Emacs' =ansi-term= mode displays some "weird characters".
    To fix this, copy [[https://gist.github.com/stig/0c8bc5aeb8602cdb45de#file-ansi-term-ti][ansi-term.ti]] to somewhere locally and run =tic= on it to
    create =.terminfo=:

    #+BEGIN_SRC sh
    curl 'https://gist.githubusercontent.com/stig/0c8bc5aeb8602cdb45de/raw/e20e6fb0a0d937b51dfdd4107053ac0b140efb2c/ansi-term.ti' > /tmp/ansi-term.ti
    tic -o ~/.terminfo /tmp/ansi-term.ti
    #+END_SRC

*** Trash

    This allows moving files to trash rather than deleting them from =dired=.
    I find that handy.

    #+BEGIN_SRC sh
    brew install trash
    #+END_SRC

** The Friendly Interactive Shell

   I'm experimenting with [[http://fishshell.com/docs/current/tutorial.html][fish]] as my login shell. On a new machine, I first
   set up a link to my =fish= dotfiles:

   #+BEGIN_SRC sh
     mkdir -p ~/.config
     test -L ~/.config/fish && rm ~/.config/fish
     ln -s ~/Dotfiles/fish ~/.config/fish
   #+END_SRC

   Then we install =fish= itself via brew:

   #+BEGIN_SRC sh
     brew install fish
   #+END_SRC

   Tediously we have to add its full path (=/usr/local/bin/fish=) to =/etc/shells=
   to allow us to use it as a login shell:

   #+BEGIN_SRC sh
        cat <<EOF | sudo patch /etc/shells
     10a11
      > /usr/local/bin/fish
      EOF
   #+END_SRC

   Finally we have to remember to actually change our login shell:

   #+BEGIN_SRC sh
     chsh -s /usr/local/bin/fish
   #+END_SRC

** Cluster SSH

   This requires a bit of hackery until [[https://github.com/brockgr/csshx/pull/77][my patch to make csshx behave in Zsh]]
   is merged.

   First we create a new =~/.clusters= file if there are none:

   #+BEGIN_SRC sh
     touch ~/.clusters
   #+END_SRC

   Then we tell =csshx= to look for clusters in =~/.clusters=. Use =C-c C-v t=
   in Emacs to tangle into place:

   #+BEGIN_SRC sh :tangle ~/.csshxrc
     extra_cluster_file=~/.clusters
   #+END_SRC

   Then we install it from my own hacked repo:

   #+BEGIN_SRC sh
     brew install https://raw.github.com/stig/dot-files/master/csshx/csshx.rb --HEAD
   #+END_SRC

** DONE .gitconfig

   Set up my basic details:

   #+BEGIN_SRC sh
     git config --global user.name "Stig Brautaset"
     git config --global user.email "stig@brautaset.org"
   #+END_SRC

   I like coloured output, particularly for diffs, thank you very much. I'm
   not entirely sure which of these actually does it though:

   #+BEGIN_SRC sh
     git config --global ui.color true
     git config --global color.ui true
   #+END_SRC

   Git aliases? I has them! I used to have more, for example =git co= as
   abbreviation for =git commit=, but since I moved to use [[http://magit.vc][Magit]] I don't need
   them any more. I've kept a few mainly for "sentimental reasons" though.

   #+BEGIN_SRC sh
     git config --global alias.lg "!git log-pretty --graph"
     git config --global alias.l "!log pretty"
     git config --global alias.log-pretty "log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
   #+END_SRC

   This alias I used for a while when creating the release notes for [[http://sbjson.org][SBJson]].
   It creates nice output for pasting into a Markdown document, for each
   commit. It is mainly suitable if you cultivate a carefully manicured git
   history. You can invoke it like =git sbjsonlog v4.0.0..v4.0.1=:

   #+BEGIN_SRC sh
      git config --global alias.sbjsonlog "log '--format=format:* [`%h`](https://github.com/stig/json-framework/commit/%H) %s'"
   #+END_SRC

   I like the "simple" style of push, where branches are assumed to be named
   similarly to upstream. This is the default in Git above version 2.0, I
   believe, but I'll leave this here for a little bit, in case I need it.

   #+BEGIN_SRC sh
     git config --global push.default simple
   #+END_SRC

** .gemrc

   I like Gem, the Ruby module installer, to install packages into my own user
   directory, so I don't have to resort to =sudo=. This setting makes that the
   default. In Emacs, use =C-c C-v t= on the next code block to "tangle" that
   snippet in place.

   #+BEGIN_SRC sh :tangle ~/.gemrc
     gem: --user-install
   #+END_SRC

** =.lein=

   Leiningen uses a default =~/.lein/profiles.clj= that is merged with
   project-specific settings. This is a handy place to set up things you want
   working with every project, for example =cider-repl= if you use CIDER in
   Emacs. (Which I do.)

   #+BEGIN_SRC clojure :tangle ~/.lein/profiles.clj :mkdirp yes
     {:user {:plugins [[lein-pprint "1.1.1"]
                       [cider/cider-nrepl "0.10.0-SNAPSHOT"]
                       [refactor-nrepl "2.0.0-SNAPSHOT"]
                       [lein-ancient "0.6.7"]
                       [lein-kibit "0.1.2"]]
             :dependencies [[org.clojure/tools.nrepl "0.2.11"]
                            [slamhound "1.3.1"]
                            [criterium "0.4.3"]]
             :aliases {"slamhound" ["run" "-m" "slam.hound"]}}}
   #+END_SRC

**** TODO Describe what the plugins do
