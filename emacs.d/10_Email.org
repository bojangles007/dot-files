#+TITLE: Email Setup
#+AUTHOR: Stig Brautaset
#+OPTIONS: f:t h:4
#+PROPERTY: header-args:sh         :tangle yes
#+PROPERTY: header-args            :results silent
* Introduction

  I'm trying to see if I can become happy reading and writing mail in Emacs. I
  have chosen Gnus as my mail reader. I already used Gnus in the past, and I
  like to read Usenet News too, so it seemed a good fit.

  Most of the Gnus specific setup is in [[file:~/Dotfiles/Gnus.org][Gnus.org]], but this file has some
  generic stuff.

* Reading Mail in Emacs

  First of all, discourage Rich Text messages. Emacs doesn't like them, or
  something.

  #+BEGIN_SRC emacs-lisp
  (setq mm-discouraged-alternatives
     '("text/richtext"))
  #+END_SRC

  I like to be able to read HTML email. Even in Gnus. Use the built-in
  renderer. This gives me the best of both worlds, IMO: immediate rendering
  of content, but open links clicked by mouse in external browser.

  #+BEGIN_SRC emacs-lisp
    (setq mm-text-html-renderer 'shr)
  #+END_SRC

* Sending Mail

  Set up defaults for sending email.

  #+BEGIN_SRC emacs-lisp
    (setq send-mail-function 'smtpmail-send-it
          message-send-mail-function 'smtpmail-send-it
          starttls-extra-arguments nil
          smtpmail-smtp-service 587
          smtpmail-debug-info t)
  #+END_SRC

  List of sender addresses and SMTP servers.

  #+BEGIN_SRC emacs-lisp
    (setq smtp-accounts
          '(("stig@brautaset.org" "mailbox@brautaset.org" "mail.gandi.net")
            ("sbrautaset@laterpay.net" "sbrautaset@laterpay.ag" "smtp.gmail.com")))
  #+END_SRC

  A function to change the active SMTP server based on the sender address.
  (This is heavily inspired by [[http://www.mostlymaths.net/2010/12/emacs-30-day-challenge-using-gnus-to.html][emacs 30 day challenge: using gnus]].)

  #+BEGIN_SRC emacs-lisp
    (defun change-smtp (recipient smtpmail-text-buffer &rest ask-for-password)
      "Change the SMTP server & user according to current sender"

      (save-excursion
        (loop with from = (save-restriction
                            (message-narrow-to-headers)
                            (message-fetch-field "from"))
              for (address smtp-user smtp-server) in smtp-accounts
              when (string-match address from)
              do (progn
                   (message "Setting SMTP server to %s for user %s"
                            smtp-server smtp-user)
                   (setq smtpmail-smtp-user smtp-user
                         smtpmail-smtp-server smtp-server)))))
  #+END_SRC

  Add the `change-smtp' function as a "before advice" to the /real/ function
  to send mail via smpt. This causes `change-smtp' to be called immediately
  before the advised function, with the same arguments.

  #+BEGIN_SRC emacs-lisp
    (advice-add #'smtpmail-via-smtp
                :before
                #'change-smtp)
  #+END_SRC

* Composing

  Use Org structure editing & table mode in Message mode. (Used for composing
  messages.) Also turn on yas minor mode, for form responses.

  #+BEGIN_SRC emacs-lisp
    (add-hook 'message-mode-hook 'turn-on-orgstruct++)
    (add-hook 'message-mode-hook 'turn-on-orgtbl)
    (add-hook 'message-mode-hook 'yas-minor-mode)
  #+END_SRC

  Add a function to cycle between from addresses in the message buffer.
  Credit to [[https://www.emacswiki.org/emacs/GnusTutorial][GnusTutorial]] which is where I found the example I adopted this
  from.

  #+BEGIN_SRC emacs-lisp
    (setq my-email-addresses (mapcar (lambda (lst) (car lst) ) smtp-accounts))
    (setq message-alternative-emails
          (regexp-opt my-email-addresses))

    (setq message-from-selected-index 0)
    (defun message-loop-from ()
      (interactive)
      (setq message-article-current-point (point))
      (goto-char (point-min))
      (if (eq message-from-selected-index (length my-email-addresses))
          (setq message-from-selected-index 0) nil)
      (while (re-search-forward "^From:.*$" nil t)
        (replace-match (concat "From: " user-full-name " <" (nth message-from-selected-index my-email-addresses) ">")))
      (goto-char message-article-current-point)
      (setq message-from-selected-index (+ message-from-selected-index 1)))

    (add-hook 'message-mode-hook
              (lambda ()
                (define-key message-mode-map "\C-c\C-f\C-f" 'message-loop-from)))
  #+END_SRC

  The =message-x= package provides some nice auto-completion and movement
  commands in headers and body.

  #+BEGIN_SRC emacs-lisp
    (use-package message-x :ensure t)
  #+END_SRC

  I use BBDB to manage contacts. I don't have a good two-way synch between
  iCloud contacts and BBDB, but selecting all contacts in Contacts.app and
  exporting them as a vCard archive can be imported with
  =bbdb-vcard-import-file=.

  #+BEGIN_SRC emacs-lisp
    (use-package bbdb :ensure t)
    (use-package bbdb-vcard :ensure t)
  #+END_SRC

  Load the offlineimap package before Gnus starts.

  #+BEGIN_SRC emacs-lisp
    (use-package offlineimap
      :ensure t
      :config
      (add-hook 'gnus-before-startup-hook 'offlineimap))
  #+END_SRC

  Supply passwords to offlineimap

  #+BEGIN_SRC emacs-lisp
    (defun offlineimap-get-password (host port)
         (let* ((netrc (netrc-parse (expand-file-name "~/.authinfo.gpg")))
                (hostentry (netrc-machine netrc host port port)))
           (when hostentry (netrc-get hostentry "password"))))
  #+END_SRC

  This requires the Emacs server to be running.

  #+BEGIN_SRC emacs-lisp
    (require 'server)
    (unless (server-running-p)
      (server-start))
  #+END_SRC

** TODO Move the server-start line to somewhere more appropriate
