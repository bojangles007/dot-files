#+TITLE: Email Setup
#+AUTHOR: Stig Brautaset
#+OPTIONS: f:t h:4
#+PROPERTY: header-args:emacs-lisp :tangle Email.el
#+PROPERTY: header-args:sh         :tangle yes
#+PROPERTY: header-args            :results silent
* Introduction

  I'm trying to see if I can become happy reading and writing mail in Emacs. I
  tried Gnus for a while, but am now using [[http://www.djcbsoftware.nl/code/mu/][mu/mu4e]].

* mu/mu4e Setup

  It's installed manually via brew, and relies on installing emacs via brew
  too. (Because Apple's version of Emacs is too old.)

  #+BEGIN_SRC sh
    brew install emacs --with-cocoa
    brew install mu --with-emacs
  #+END_SRC

  First we add mu4e to our load path and load the package, and tell it where
  our =mu= binary is.

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "/usr/local/opt/mu/share/emacs/site-lisp/mu/mu4e/")
    (require 'mu4e)

    (setq mu4e-mu-binary "/usr/local/bin/mu")
  #+END_SRC

  Save attachment to my ~/Downloads folder. Apparently this value can also be
  a function, but I've not needed that yet.

  #+BEGIN_SRC emacs-lisp
    (setq mu4e-attachment-dir  "~/Downloads")
  #+END_SRC

  Try to show images inline if possible, and use imagemagick if our Emacs
  supports that.

  #+BEGIN_SRC emacs-lisp
    (setq mu4e-view-show-images t)

    ;; use imagemagick, if available
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))
  #+END_SRC

  Use a non-default way to view HTML messages.

  #+BEGIN_SRC emacs-lisp
    (require 'mu4e-contrib)
    (setq mu4e-html2text-command 'mu4e-shr2text)

    (add-hook 'mu4e-view-mode-hook
              (lambda()
                ;; try to emulate some of the eww key-bindings
                (local-set-key (kbd "<tab>") 'shr-next-link)
                (local-set-key (kbd "<backtab>") 'shr-previous-link)))
  #+END_SRC

  Set up different contexts based on which folder / mailbox I'm in. This is
  much more obvious than Gnus' approach, IMO. I like it.

  #+BEGIN_SRC emacs-lisp
    (require 's) ;; Used by my :match-funcs

    (defun get-string-from-file (filePath)
      "Return filePath's file content."
      (with-temp-buffer
        (insert-file-contents filePath)
        (buffer-string)))

    (defun my-emacs-org-sig ()
      (concat "; " (car (split-string (emacs-version) " ("))
              ", " (car (split-string (org-version nil t) " ("))))

    (setq mu4e-contexts
          `(,(make-mu4e-context
              :name "Private"
              :enter-func (lambda () (mu4e~main-view-real nil nil))

              :match-func (lambda (msg)
                            (when msg
                              (s-starts-with-p "/Private/"
                                               (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "stig@brautaset.org")

                      (mu4e-sent-folder . "/Private/sent")
                      (mu4e-drafts-folder . "/Private/drafts")
                      (mu4e-trash-folder .  "/Private/trash")
                      (mu4e-refile-folder . "/Private/Archive")

                      (mu4e-get-mail-command . "mbsync icloud")

                      ;; Quickly jump to maildir based on context
                      (mu4e-maildir-shortcuts . (("/Private/INBOX" . ?i)
                                                 ("/Private/Lists" . ?l)
                                                 ("/Private/spam" . ?s)
                                                 ("/Private/archive" . ?a)))

                      (mu4e-bookmarks . (("flag:unread AND NOT flag:trashed AND maildir:/Private/INBOX" "Unread Messages" ?u)
                                         ("flag:unread AND NOT flag:trashed AND maildir:/Private/Lists" "Unread List Messages" ?l)
                                         ("date:today..now AND maildir:/Private/*" "Today's messages" ?t)
                                         ("date:7d..now AND maildir:/Private/*" "Last 7 days" ?7)))


                      (mu4e-sent-messages-behavior . sent)
                      (mu4e-compose-signature . nil))) ; (my-emacs-org-sig)


            ,(make-mu4e-context
              :name "Work"
              :enter-func (lambda () (mu4e~main-view-real nil nil))
          
              :match-func (lambda (msg)
                            (when msg
                              (s-starts-with-p "/Work/"
                                               (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "sbrautaset@laterpay.net")

                      (mu4e-sent-folder . "/Work/sent")
                      (mu4e-drafts-folder . "/Work/drafts")
                      (mu4e-trash-folder .  "/Work/trash")
                      (mu4e-refile-folder . "/Work/archive")
                      (mu4e-sent-messages-behavior . delete)

                      (mu4e-get-mail-command . "mbsync gmail")

                      ;; Quickly jump to maildirs
                      (mu4e-maildir-shortcuts . (("/Work/INBOX" . ?i)
                                                 ("/Work/spam" . ?s)
                                                 ("/Work/archive" . ?a)))

                      (mu4e-bookmarks . (("flag:unread AND NOT flag:trashed AND maildir:/Work/INBOX" "Unread Messages" ?u)
                                         ("date:today..now AND maildir:/Work/*" "Today's messages" ?t)
                                         ("date:7d..now AND maildir:/Work/*" "Last 7 days" ?7)))

                      (mu4e-compose-signature . (get-string-from-file "~/CloudDocs/LaterPay.signature"))))))

    (setq mu4e-context-policy 'ask-if-none)
  #+END_SRC

  A list of my addresses.

  #+BEGIN_SRC emacs-lisp
    (setq mu4e-user-mail-address-list
          '("stig@brautaset.org"
            "stig.brautaset@icloud.com"
            "sbrautaset@laterpay.net"))
  #+END_SRC

  Tell mu4e that I don't want to email myself, normally.

  #+BEGIN_SRC emacs-lisp
  (setq mu4e-compose-dont-reply-to-self t)
  #+END_SRC

  Allow viewing messages in a browser.

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'mu4e-headers-actions
                  '("in browser" . mu4e-action-view-in-browser) t)
    (add-to-list 'mu4e-view-actions
                  '("in browser" . mu4e-action-view-in-browser) t)
  #+END_SRC

  Because of the weird interaction between Gmail labels and IMAP, often
  messages show up in =archive= /and/ INBOX. This setting should help in that
  case:

  #+BEGIN_SRC emacs-lisp
  (setq mu4e-headers-skip-duplicates t)
  #+END_SRC

  Configure mu4e to support queueing mail for sending later, for cases when I
  don't have network connection.

  #+BEGIN_SRC emacs-lisp
      (setq smtpmail-queue-mail nil
          smtpmail-queue-dir   "~/Maildir/queue/cur")
  #+END_SRC

  This requires creating the queue directory, which you can do with =mu=. We
  also tell mu not to index the queue:

  #+BEGIN_SRC sh
  mu mkdir ~/Maildir/queue
  touch ~/Maildir/queue/.noindex
  #+END_SRC

* Downloading email over IMAP

  I used to use OfflineIMAP for this, but mbsync (from the isync suite) seems
  faster and doesn't have this annoying db outside of the Maildir to keep in
  sync. Config looks like this:

  #+BEGIN_SRC conf :tangle ~/.mbsyncrc
    IMAPAccount icloud
    Host imap.mail.me.com
    User stig.brautaset@icloud.com
    # UseIMAPS yes
    AuthMechs LOGIN
    SSLType IMAPS
    SSLVersions TLSv1
    PassCmd "security find-generic-password -s mbsync-icloud-password -w"

    IMAPStore icloud-remote
    Account icloud

    MaildirStore icloud-local
    Path ~/Maildir/Private/
    Inbox ~/Maildir/Private/INBOX
    Trash "Deleted Messages"

    Channel icloud-folders
    Master :icloud-remote:
    Slave :icloud-local:
    Patterns "INBOX" "Lists" "Archive"
    Create Both
    Expunge Both
    SyncState *

    Channel icloud-trash
    Master :icloud-remote:"Deleted Messages"
    Slave :icloud-local:trash
    Create Both
    Expunge Both
    SyncState *

    Channel icloud-drafts
    Master :icloud-remote:"Drafts"
    Slave :icloud-local:drafts
    Create Both
    Expunge Both
    SyncState *

    Channel icloud-spam
    Master :icloud-remote:"Junk"
    Slave :icloud-local:spam
    Create Both
    Expunge Both
    SyncState *

    Channel icloud-sent
    Master :icloud-remote:"Sent Messages"
    Slave :icloud-local:sent
    Create Both
    Expunge Both
    SyncState *


    Group icloud
    Channel icloud-folders
    Channel icloud-sent
    Channel icloud-trash
    Channel icloud-drafts
    Channel icloud-spam


    # ACCOUNT INFORMATION
    IMAPAccount gmail
    Host imap.gmail.com
    User sbrautaset@laterpay.ag
    PassCmd "security find-generic-password -s mbsync-gmail-password -w"
    # UseIMAPS yes
    # AuthMechs LOGIN
    AuthMechs PLAIN
    SSLType IMAPS
    # SSLVersions SSLv3
    CertificateFile /usr/local/etc/openssl/cert.pem

    # THEN WE SPECIFY THE LOCAL AND REMOTE STORAGE
    # - THE REMOTE STORAGE IS WHERE WE GET THE MAIL FROM (E.G., THE
    #   SPECIFICATION OF AN IMAP ACCOUNT)
    # - THE LOCAL STORAGE IS WHERE WE STORE THE EMAIL ON OUR COMPUTER

    # REMOTE STORAGE (USE THE IMAP ACCOUNT SPECIFIED ABOVE)
    IMAPStore gmail-remote
    Account gmail

    # LOCAL STORAGE (CREATE DIRECTORIES with mkdir -p Maildir/gmail)
    MaildirStore gmail-local
    Path ~/Maildir/Work/
    Inbox ~/Maildir/Work/INBOX

    # CONNECTIONS SPECIFY LINKS BETWEEN REMOTE AND LOCAL FOLDERS
    #
    # CONNECTIONS ARE SPECIFIED USING PATTERNS, WHICH MATCH REMOTE MAIl
    # FOLDERS. SOME COMMONLY USED PATTERS INCLUDE:
    #
    # 1 "*" TO MATCH EVERYTHING
    # 2 "!DIR" TO EXCLUDE "DIR"
    # 3 "DIR" TO MATCH DIR
    #
    # FOR INSTANCE IN THE SPECIFICATION BELOW:
    #
    # gmail-inbox gets the folder INBOX, ARCHIVE, and everything under "ARCHIVE*"
    # gmail-trash gets only the "[Gmail]/Trash" folder and stores it to the local "trash" folder

    Channel gmail-inbox
    Master :gmail-remote:
    Slave :gmail-local:
    Patterns "INBOX"
    Create Both
    Expunge Both
    SyncState *

    Channel gmail-refile
    Master :gmail-remote:"[Gmail]/All Mail"
    Slave :gmail-local:archive
    Create Both
    Expunge Both
    SyncState *

    Channel gmail-trash
    Master :gmail-remote:"[Gmail]/Bin"
    Slave :gmail-local:trash
    Create Both
    Expunge Both
    SyncState *

    Channel gmail-drafts
    Master :gmail-remote:"[Gmail]/Drafts"
    Slave :gmail-local:drafts
    Create Both
    Expunge Both
    SyncState *

    Channel gmail-spam
    Master :gmail-remote:"[Gmail]/Spam"
    Slave :gmail-local:spam
    Create Both
    Expunge Both
    SyncState *

    Channel gmail-sent
    Master :gmail-remote:"[Gmail]/Sent Mail"
    Slave :gmail-local:sent
    Create Both
    Expunge Both
    SyncState *

    # GROUPS PUT TOGETHER CHANNELS, SO THAT WE CAN INVOKE
    # MBSYNC ON A GROUP TO SYNC ALL CHANNELS
    #
    # FOR INSTANCE: "mbsync gmail" GETS MAIL FROM
    # "gmail-inbox", "gmail-sent", and "gmail-trash"
    #
    Group gmail
    Channel gmail-inbox
    Channel gmail-refile
    Channel gmail-sent
    Channel gmail-trash
    Channel gmail-drafts
    Channel gmail-spam
  #+END_SRC

  This option helps us avoid "Duplicate UID" messages during mbsync runs.

  #+BEGIN_SRC emacs-lisp
    (setq mu4e-change-filenames-when-moving t)
  #+END_SRC

  Make the mu4e update window smaller than default.

  #+BEGIN_SRC emacs-lisp
  (setq mu4e~update-buffer-height 3)
  #+END_SRC

* Reflow mail using soft linebreaks

#+BEGIN_SRC emacs-lisp
  ;; tip submitted by mu4e user cpbotha
  (add-hook 'mu4e-compose-mode-hook
            (lambda ()
              (use-hard-newlines t 'always)))
#+END_SRC

* Cycle addresses in the From header

  Add a keybinding to cycle between from addresses in the message buffer.
  Credit to [[https://www.emacswiki.org/emacs/GnusTutorial][GnusTutorial]] which is where I found the example I adopted this
  from.

  #+BEGIN_SRC emacs-lisp
    (setq message-alternative-emails
          (regexp-opt mu4e-user-mail-address-list))

    (setq message-from-selected-index 0)
    (defun message-loop-from ()
      (interactive)
      (setq message-article-current-point (point))
      (goto-char (point-min))
      (if (eq message-from-selected-index (length mu4e-user-mail-address-list))
          (setq message-from-selected-index 0) nil)
      (while (re-search-forward "^From:.*$" nil t)
        (replace-match (concat "From: " user-full-name " <" (nth message-from-selected-index mu4e-user-mail-address-list) ">")))
      (goto-char message-article-current-point)
      (setq message-from-selected-index (+ message-from-selected-index 1)))

    (add-hook 'message-mode-hook
              (lambda ()
                (define-key message-mode-map "\C-c\C-f\C-f" 'message-loop-from)))
  #+END_SRC

* Box quotes are so cute!

  Install boxquote to make fancy text boxes like this:

  #+BEGIN_EXAMPLE
    ,----
    | This is a box quote!
    `----
  #+END_EXAMPLE

  You can even set a title!

  #+BEGIN_EXAMPLE
    ,----[ with a title! ]
    | This is another box quote
    `----
  #+END_EXAMPLE

  #+BEGIN_SRC emacs-lisp
    (use-package boxquote :ensure t)
  #+END_SRC

* Compose Emails with Org mode

  I want to be able to create links to messages from Org mode capture
  templates, as email Inbox is a terrible TODO list.

  #+BEGIN_SRC emacs-lisp
    (use-package org-mu4e)
  #+END_SRC

  I also want to be able to use Org's table editor, and structure editing, in
  message mode:

  #+BEGIN_SRC emacs-lisp
  (add-hook 'message-mode-hook 'turn-on-orgstruct++)
  (add-hook 'message-mode-hook 'turn-on-orgtbl)
  #+END_SRC

  Not only that, but I want to be able to create MIME HTML mail based on
  org-formatted source. There's a package for that too, of course.

  #+BEGIN_SRC emacs-lisp
    (use-package org-mime
      :config
      (add-hook 'message-mode-hook
                (lambda ()
                  (local-set-key "\C-ch" 'org-mime-htmlize))))
  #+END_SRC

* Sending mail with MSMTP

  I'm currently testing [[http://msmtp.sourceforge.net/][msmtp]] for sending email. I install it with brew:

  #+BEGIN_SRC sh
  brew install msmtp
  #+END_SRC

  MSMTP's configuration is really simple, and it will detect the account to
  use from the "from" address. Let's go!

  MSMTP obtains passwords from the system Keychain. See the [[http://msmtp.sourceforge.net/doc/msmtp.html#Authentication][Authentication]]
  section in the msmtp documentation for details.

  #+BEGIN_SRC conf :tangle ~/.msmtprc
    defaults

    port 587
    tls on
    tls_trust_file /usr/local/etc/openssl/cert.pem
    auth on

    ###############
    account private

    from stig@brautaset.org
    host mail.gandi.net
    user mailbox@brautaset.org

    #############
    account icloud

    from stig.brautaset@icloud.com
    host smtp.mail.me.com
    user stig.brautaset@icloud.com

    ############
    account work

    from sbrautaset@laterpay.net
    host smtp.gmail.com
    user sbrautaset@laterpay.ag

    #########################
    account default : private
  #+END_SRC

  Finally we have to tell Emacs to use msmtp to send mail:

  #+BEGIN_SRC emacs-lisp
    (setq message-send-mail-function 'message-send-mail-with-sendmail
          sendmail-program "/usr/local/bin/msmtp")
  #+END_SRC
