#+TITLE: Email Setup
#+AUTHOR: Stig Brautaset
#+OPTIONS: f:t h:4
#+PROPERTY: header-args:emacs-lisp :tangle Email.el
#+PROPERTY: header-args:sh         :tangle yes
#+PROPERTY: header-args            :results silent
* Introduction

  I'm trying to see if I can become happy reading and writing mail in Emacs. I
  have chosen Gnus as my mail reader. I already used Gnus in the past, and I
  follow a few newsgroups, so it seemed a good fit.

* Gnus setup
  :PROPERTIES:
  :header-args:emacs-lisp: :tangle ~/.gnus.el
  :END:

  This section (and only this!) is written to =~/.gnus.el= rather than
  =Gnus.el= in this directory. We could probably just set it here and make
  =~/.gnus.el= an empty file, but this should be marginally better for
  fiddling with Gnus config without restarting Emacs.

  First write a header to =~/.gnus.el= so it won't be confused with the real
  config. Sadness and woe will betide you if you edit it and start Gnus: your
  changes will be summarily overwritten.

  #+BEGIN_SRC emacs-lisp
    ;; WARNING: The primary source of this config is in the ~/Dotfiles/Gnus.org
    ;; file. Any changes made to Gnus.el will be blown away when Gnus starts.
  #+END_SRC

  First of all, discourage Rich Text messages. Emacs doesn't like them, or
  something.

  #+BEGIN_SRC emacs-lisp
  (setq mm-discouraged-alternatives
     '("text/richtext"))
  #+END_SRC

  I like to be able to read HTML email. Even in Gnus. Use the built-in
  renderer. This gives me the best of both worlds, IMO: immediate rendering
  of content, but open links clicked by mouse in external browser.

  #+BEGIN_SRC emacs-lisp
    (setq mm-text-html-renderer 'shr)
  #+END_SRC

  I only use Gnus, so I don't care about =.newsrc=, actually.

  #+BEGIN_SRC emacs-lisp
    (setq gnus-read-newsrc-file nil)
    (setq gnus-save-newsrc-file nil)
  #+END_SRC

  When viewing articles, remove Carriage Returns.

  #+BEGIN_SRC emacs-lisp
    (setq gnus-treat-strip-cr t)
  #+END_SRC

  Load additional libraries we'll use. nnmail is used later to move messages
  to the correct folder when they are expired. nnir is used to search
  messages. By loading them at gnus start time, rather than emacs start time,
  we get a /little/ speed improvement.

  #+BEGIN_SRC emacs-lisp
    (require 'nnmail)
    (require 'nnir)
  #+END_SRC

  For reading bona fide news I use [[http://gmane.org][Gmane]]. Although I prefer email
  subscriptions because they sync read marks via IMAP. (This is important
  because I check the same accounts from multiple machines.)

  Previously I used Leafnode to avoid hangs when starting Gnus, but now I'm
  experimenting with `gnus-unplugged'. (I use a laptop and often have no
  internet where I am.)

  #+BEGIN_SRC emacs-lisp
    (setq gnus-select-method '(nntp "news.gmane.org"))
  #+END_SRC

  I also have two mail accounts. I don't subscribe to work mail folders on my
  personal account, but for convenience this config is the same.

  #+BEGIN_SRC emacs-lisp
    (setq gnus-secondary-select-methods
          '((nnimap "Work"
                    (nnimap-address "imap.gmail.com")
                    (nnir-search-engine imap))
            (nnimap "Play"
                    (nnimap-address "imap.mail.me.com")
                    (nnir-search-engine imap))))
  #+END_SRC

  A list of groups I am subscribed to. I am honestly not certain what this does.

  #+BEGIN_SRC emacs-lisp
    (setq message-subscribed-addresses
          '("centos-announce@centos.org"
            "fish-users@lists.sourceforge.net"))
  #+END_SRC

  Ignore all groups matching this regular expression.

  #+BEGIN_SRC emacs-lisp
    (setq gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\(\\|$\\)\\|^[\"]\"[#'()]")
  #+END_SRC

  Always keep the INBOX visible, even if it has no messages. This is handy so
  that I can always select it and have the above posting-styles applied when
  writing new mail.

  #+BEGIN_SRC emacs-lisp
    (setq gnus-permanently-visible-groups "INBOX")
  #+END_SRC

  Set different parameters based on the group/folder I currently have open.

  #+BEGIN_SRC emacs-lisp
    (setq gnus-parameters
          '((".*"
             (gcc-self . "nnimap+Play:Sent Messages")
             (expiry-target . "nnimap+Play:Deleted Messages")
             (expiry-wait . never)
             (posting-style
              (name "Stig Brautaset")
              (address "stig@brautaset.org")))

            ("^nnimap\\+Work"
             (gcc-self . "nnimap+Work:[Gmail].Sent Mail")
             (expiry-target . "nnimap+Work:[Gmail].Bin")
             (posting-style
              (address "sbrautaset@laterpay.net")
              (organisation "LaterPay GmbH")))

            (":Lists"
             (expiry-target . delete)
             (expiry-wait . 14)
             (total-expire . t))

            ("^nnrss:"
             (mm-discouraged-alternatives nil))

            ("INBOX"
             (expiry-wait . immediate))

            (":Archive"
             (expiry-wait . never))))
  #+END_SRC

* Sending Mail

  Set up defaults for sending email.

  #+BEGIN_SRC emacs-lisp
    (setq send-mail-function 'smtpmail-send-it
          message-send-mail-function 'smtpmail-send-it
          starttls-extra-arguments nil
          smtpmail-smtp-service 587
          smtpmail-debug-info t)
  #+END_SRC

  List of sender addresses and SMTP servers.

  #+BEGIN_SRC emacs-lisp
    (setq smtp-accounts
          '(("stig@brautaset.org" "mailbox@brautaset.org" "mail.gandi.net")
            ("sbrautaset@laterpay.net" "sbrautaset@laterpay.ag" "smtp.gmail.com")))
  #+END_SRC

  A function to change the active SMTP server based on the sender address.
  (This is heavily inspired by [[http://www.mostlymaths.net/2010/12/emacs-30-day-challenge-using-gnus-to.html][emacs 30 day challenge: using gnus]].)

  #+BEGIN_SRC emacs-lisp
    (defun change-smtp (recipient smtpmail-text-buffer &rest ask-for-password)
      "Change the SMTP server & user according to current sender"

      (save-excursion
        (loop with from = (save-restriction
                            (message-narrow-to-headers)
                            (message-fetch-field "from"))
              for (address smtp-user smtp-server) in smtp-accounts
              when (string-match address from)
              do (progn
                   (message "Setting SMTP server to %s for user %s"
                            smtp-server smtp-user)
                   (setq smtpmail-smtp-user smtp-user
                         smtpmail-smtp-server smtp-server)))))
  #+END_SRC

  Add the `change-smtp' function as a "before advice" to the /real/ function
  to send mail via smpt. This causes `change-smtp' to be called immediately
  before the advised function, with the same arguments.

  #+BEGIN_SRC emacs-lisp
    (advice-add #'smtpmail-via-smtp
                :before
                #'change-smtp)
  #+END_SRC

* Composing

  Use Org structure editing & table mode in Message mode. (Used for composing
  messages.)

  #+BEGIN_SRC emacs-lisp
    (add-hook 'message-mode-hook 'turn-on-orgstruct++)
    (add-hook 'message-mode-hook 'turn-on-orgtbl)
  #+END_SRC

  Add a function to cycle between from addresses in the message buffer.
  Credit to [[https://www.emacswiki.org/emacs/GnusTutorial][GnusTutorial]] which is where I found the example I adopted this
  from.

  #+BEGIN_SRC emacs-lisp
    (setq my-email-addresses (mapcar (lambda (lst) (car lst) ) smtp-accounts))
    (setq message-alternative-emails
          (regexp-opt my-email-addresses))

    (setq message-from-selected-index 0)
    (defun message-loop-from ()
      (interactive)
      (setq message-article-current-point (point))
      (goto-char (point-min))
      (if (eq message-from-selected-index (length my-email-addresses))
          (setq message-from-selected-index 0) nil)
      (while (re-search-forward "^From:.*$" nil t)
        (replace-match (concat "From: " user-full-name " <" (nth message-from-selected-index my-email-addresses) ">")))
      (goto-char message-article-current-point)
      (setq message-from-selected-index (+ message-from-selected-index 1)))

    (add-hook 'message-mode-hook
              (lambda ()
                (define-key message-mode-map "\C-c\C-f\C-f" 'message-loop-from)))
  #+END_SRC

  The =message-x= package provides some nice auto-completion and movement
  commands in headers and body.

  #+BEGIN_SRC emacs-lisp
    (use-package message-x :ensure t)
  #+END_SRC

* Managing Contacts

  I use BBDB to manage contacts.

  #+BEGIN_SRC emacs-lisp
    (use-package bbdb
      :ensure t
      :init
      (setq bbdb-file-remote "~/Library/Mobile Documents/com~apple~CloudDocs/Sync/bbdb")

      ;; Don't show additions to BBDB in a separate window
      (setq bbdb-mua-pop-up nil)

      ;; My own email addresses
      (setq bbdb-user-mail-address-re
            "stig@brautaset.org\\|stig.brautaset@icloud.com\\|sbrautaset@laterpay.net")

      ;; Only add contacts for mail addressed to me
      (setq bbdb-accept-message-alist
            '(("to" . "stig@brautaset.org\\|stig.brautaset@icloud.com\\|sbrautaset@laterpay.net")))

      (setq bbdb-ignore-message-alist
            '(("from" . "no.?reply@\\|notifications@\\|jira@")))

      :config
      (bbdb-initialize 'gnus 'message)
      (bbdb-mua-auto-update-init 'gnus 'message))
  #+END_SRC

  I don't have a good two-way synch between iCloud contacts and BBDB, but
  selecting all contacts in Contacts.app and exporting them as a vCard archive
  can be imported with =bbdb-vcard-import-file=.

  #+BEGIN_SRC emacs-lisp
    (use-package bbdb-vcard
      :ensure t)
  #+END_SRC
