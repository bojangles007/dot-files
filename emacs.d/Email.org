#+TITLE: Email Setup
#+AUTHOR: Stig Brautaset
#+OPTIONS: f:t h:4
#+PROPERTY: header-args:emacs-lisp :tangle Email.el
#+PROPERTY: header-args:sh         :tangle yes
#+PROPERTY: header-args            :results silent
* Introduction

  I'm trying to see if I can become happy reading and writing mail in Emacs. I
  have chosen Gnus as my mail reader. I already used Gnus in the past, and I
  follow a few newsgroups, so it seemed a good fit.

* mu4e Setup

  It's installed manually via brew, and relies on installing emacs via brew
  too. (Because Apple's version of emacs is too old.)

  : brew install emacs --with-cocoa
  : brew install mu --with-emacs

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "/usr/local/opt/mu/share/emacs/site-lisp/mu/mu4e/")

    (require 'mu4e)

    (setq mu4e-mu-binary "/usr/local/bin/mu")

    ;; save attachment to my downloads folder (this can also be a function)
    (setq mu4e-attachment-dir  "~/Downloads")

    ;; attempt to show images when viewing messages
    (setq mu4e-view-show-images t)

    ;; use imagemagick, if available
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))

    (require 'mu4e-contrib)
    (setq mu4e-html2text-command 'mu4e-shr2text)


    ;; Remove the default "unread" bookmark and add our own
    (setq mu4e-bookmarks (cdr mu4e-bookmarks))
    (add-to-list 'mu4e-bookmarks
                 '("flag:unread AND NOT maildir:/Work/[Gmail].Bin AND NOT maildir:Deleted*" "Unread Messages" ?u))

    (add-hook 'mu4e-view-mode-hook
              (lambda()
                ;; try to emulate some of the eww key-bindings
                (local-set-key (kbd "<tab>") 'shr-next-link)
                (local-set-key (kbd "<backtab>") 'shr-previous-link)))


    (setq mu4e-get-mail-command "offlineimap"
          mu4e-update-interval 300)

    (require 's) ;; Used by my :match-funcs

    (setq mu4e-contexts
          `(,(make-mu4e-context
              :name "Private"
              :enter-func (lambda () (mu4e-message "Switch to the Private context"))
              ;; leave-func not defined
              :match-func (lambda (msg)
                            (when msg
                              (s-starts-with-p "/Private/"
                                               (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "stig@brautaset.org")
                      (mu4e-sent-folder . "/Private/Sent Messages")
                      (mu4e-drafts-folder . "/Private/Drafts")
                      (mu4e-trash-folder .  "/Private/Deleted Messages")
                      (mu4e-refile-folder . "/Private/Archive")

                      ;; (mu4e-compose-signature
                      ;;  . (concat "; "
                      ;;            (car (split-string (emacs-version) " ("))
                      ;;            ", "
                      ;;            (car (split-string (org-version nil t) " ("))))

                      ))

            ,(make-mu4e-context
              :name "Work"
              :enter-func (lambda () (mu4e-message "Switch to the Work context"))
              ;; leave-fun not defined
              :match-func (lambda (msg)
                            (when msg
                              (s-starts-with-p "/Work/"
                                               (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "sbrautaset@laterpay.net")
                      (mu4e-sent-folder . "/Work/[Gmail].Sent Mail")
                      (mu4e-drafts-folder . "/Work/[Gmail].Drafts")
                      (mu4e-trash-folder .  "/Work/[Gmail].Bin")
                      (mu4e-refile-folder . "/Work/[Gmail].All Mail")
                      (mu4e-sent-messages-behavior . 'delete)
                      ))))

    (setq mu4e-context-policy 'pick-first)

    ;; (mu4e-compose-signature .
    ;;                         ((concat )
    ;;                          "Prof. Alice Derleth\n"
    ;;                          "Miskatonic University, Dept. of Occult Sciences\n"))

    (setq smtpmail-queue-mail nil
          smtpmail-queue-dir   "~/Maildir/queue/cur")
  #+END_SRC

* Sending Mail

  Set up defaults for sending email.

  #+BEGIN_SRC emacs-lisp
    (setq send-mail-function 'smtpmail-send-it
          message-send-mail-function 'smtpmail-send-it
          starttls-extra-arguments nil
          smtpmail-smtp-service 587
          smtpmail-debug-info t)
  #+END_SRC

  List of sender addresses and SMTP servers.

  #+BEGIN_SRC emacs-lisp
    (setq smtp-accounts
          '(("stig@brautaset.org" "mailbox@brautaset.org" "mail.gandi.net")
            ("sbrautaset@laterpay.net" "sbrautaset@laterpay.ag" "smtp.gmail.com")))
  #+END_SRC

  A function to change the active SMTP server based on the sender address.
  (This is heavily inspired by [[http://www.mostlymaths.net/2010/12/emacs-30-day-challenge-using-gnus-to.html][emacs 30 day challenge: using gnus]].)

  #+BEGIN_SRC emacs-lisp
    (defun change-smtp (recipient smtpmail-text-buffer &rest ask-for-password)
      "Change the SMTP server & user according to current sender"

      (save-excursion
        (loop with from = (save-restriction
                            (message-narrow-to-headers)
                            (message-fetch-field "from"))
              for (address smtp-user smtp-server) in smtp-accounts
              when (string-match address from)
              do (progn
                   (message "Setting SMTP server to %s for user %s"
                            smtp-server smtp-user)
                   (setq smtpmail-smtp-user smtp-user
                         smtpmail-smtp-server smtp-server)))))
  #+END_SRC

  Add the `change-smtp' function as a "before advice" to the /real/ function
  to send mail via smpt. This causes `change-smtp' to be called immediately
  before the advised function, with the same arguments.

  #+BEGIN_SRC emacs-lisp
    (advice-add #'smtpmail-via-smtp
                :before
                #'change-smtp)
  #+END_SRC

* Composing

  Use Org structure editing & table mode in Message mode. (Used for composing
  messages.)

  #+BEGIN_SRC emacs-lisp
    (add-hook 'message-mode-hook 'turn-on-orgstruct++)
    (add-hook 'message-mode-hook 'turn-on-orgtbl)
  #+END_SRC

  Not only that, but I want to be able to create MIME HTML mail based on
  org-formatted source. There's a package for that too, of course.

  #+BEGIN_SRC emacs-lisp
    (use-package org-mime
      :config
      (add-hook 'message-mode-hook
                (lambda ()
                  (local-set-key "\C-ch" 'org-mime-htmlize))))
  #+END_SRC

  Add a function to cycle between from addresses in the message buffer.
  Credit to [[https://www.emacswiki.org/emacs/GnusTutorial][GnusTutorial]] which is where I found the example I adopted this
  from.

  #+BEGIN_SRC emacs-lisp
    (setq my-email-addresses (mapcar (lambda (lst) (car lst) ) smtp-accounts))
    (setq message-alternative-emails
          (regexp-opt my-email-addresses))

    (setq message-from-selected-index 0)
    (defun message-loop-from ()
      (interactive)
      (setq message-article-current-point (point))
      (goto-char (point-min))
      (if (eq message-from-selected-index (length my-email-addresses))
          (setq message-from-selected-index 0) nil)
      (while (re-search-forward "^From:.*$" nil t)
        (replace-match (concat "From: " user-full-name " <" (nth message-from-selected-index my-email-addresses) ">")))
      (goto-char message-article-current-point)
      (setq message-from-selected-index (+ message-from-selected-index 1)))

    (add-hook 'message-mode-hook
              (lambda ()
                (define-key message-mode-map "\C-c\C-f\C-f" 'message-loop-from)))
  #+END_SRC

  The =message-x= package provides some nice auto-completion and movement
  commands in headers and body.

  #+BEGIN_SRC emacs-lisp
    (use-package message-x :ensure t)
  #+END_SRC

  Install boxquote to make fancy text boxes like this:

  #+BEGIN_EXAMPLE
    ,----
    | This is a box quote!
    `----
  #+END_EXAMPLE

  You can even set a title!

  #+BEGIN_EXAMPLE
    ,----[ with a title! ]
    | This is another box quote
    `----
  #+END_EXAMPLE

  #+BEGIN_SRC emacs-lisp
    (use-package boxquote :ensure t)
  #+END_SRC

* Managing Contacts

  I use BBDB to manage contacts.

  #+BEGIN_SRC emacs-lisp
    (use-package bbdb
      :ensure t
      :init
      (setq bbdb-file-remote "~/Library/Mobile Documents/com~apple~CloudDocs/Sync/bbdb")

      (setq bbdb-mua-pop-up 'horiz)

      ;; My own email addresses
      (setq bbdb-user-mail-address-re
            "stig.brautaset@icloud.com\\|stig@brautaset.org\\|sbrautaset@laterpay.net")

      ;; Only add contacts for mail addressed to me
      (setq bbdb-accept-message-alist
            `(("To" . ,bbdb-user-mail-address-re)))

      ;; Don't add contacts for these senders, regardless of who it's addressed to
      (require 'subr-x)
      (setq bbdb-ignore-message-alist
            `(("From" . ,(string-join '("@dpd.co.uk"
                                        "@notifications.workablemail.com"
                                        "auto-confirm@amazon.co.uk"
                                        "@laterpay.atlassian.net"
                                        "devbugs@apple.com"
                                        "calendar-notification@google.com"
                                        "notify@twitter.com"
                                        "jira@"
                                        "confluence@"
                                        "support@"
                                        "feedback@"
                                        "nobody@"
                                        "no.?reply@"
                                        "notifications@")
                                      "\\|"))))

      ;; Ask me whether to add contacts
      (setq bbdb-update-records-p 'create)

      :config
      (bbdb-initialize 'gnus 'message)
      (bbdb-mua-auto-update-init 'gnus 'message))
  #+END_SRC

  I don't have a good two-way synch between iCloud contacts and BBDB, but
  selecting all contacts in Contacts.app and exporting them as a vCard archive
  can be imported with =bbdb-vcard-import-file=.

  #+BEGIN_SRC emacs-lisp
    (use-package bbdb-vcard
      :ensure t)
  #+END_SRC
