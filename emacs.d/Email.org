#+TITLE: Email Setup
#+AUTHOR: Stig Brautaset
#+OPTIONS: f:t h:4
#+PROPERTY: header-args:emacs-lisp :tangle Email.el
#+PROPERTY: header-args:sh         :tangle yes
#+PROPERTY: header-args            :results silent
* Introduction

  I'm trying to see if I can become happy reading and writing mail in Emacs. I
  have chosen Gnus as my mail reader. I already used Gnus in the past, and I
  follow a few newsgroups, so it seemed a good fit.

* mu4e Setup

  It's installed manually via brew, and relies on installing emacs via brew
  too. (Because Apple's version of emacs is too old.)

  #+BEGIN_SRC sh
    brew install emacs --with-cocoa
    brew install mu --with-emacs
  #+END_SRC

  First we add mu4e to our load path and load the package, and tell it where
  our =mu= binary is.

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "/usr/local/opt/mu/share/emacs/site-lisp/mu/mu4e/")
    (require 'mu4e)

    (setq mu4e-mu-binary "/usr/local/bin/mu")
  #+END_SRC

  Save attachment to my ~/Downloads folder. Apparently this value can also be
  a function, but I've not needed that yet.

  #+BEGIN_SRC emacs-lisp
    (setq mu4e-attachment-dir  "~/Downloads")
  #+END_SRC

  Try to show images inline if possible, and use imagemagick if our Emacs
  supports that.

  #+BEGIN_SRC emacs-lisp
    (setq mu4e-view-show-images t)

    ;; use imagemagick, if available
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))
  #+END_SRC

  Use a non-default way to view HTML messages.

  #+BEGIN_SRC emacs-lisp
    (require 'mu4e-contrib)
    (setq mu4e-html2text-command 'mu4e-shr2text)

    (add-hook 'mu4e-view-mode-hook
              (lambda()
                ;; try to emulate some of the eww key-bindings
                (local-set-key (kbd "<tab>") 'shr-next-link)
                (local-set-key (kbd "<backtab>") 'shr-previous-link)))
  #+END_SRC

  Shortcuts for jumping to inbox on my two accounts.

  #+BEGIN_SRC emacs-lisp
    (setq mu4e-maildir-shortcuts
          '(("/Private/INBOX" . ?p)
            ("/Work/INBOX" . ?w)))
  #+END_SRC

  Remove the default "unread" bookmark and add our own. My version ignores
  stuff in our Trash folders. I *love* how simple mu4e makes this!

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'mu4e-bookmarks
                 '("flag:unread AND NOT flag:trashed AND maildir:/Work*" "Work Unread Messages" ?W))
    (add-to-list 'mu4e-bookmarks
                 '("flag:unread AND NOT flag:trashed AND maildir:/Private*" "Private Unread Messages" ?P))
  #+END_SRC

  Tell mu4e how to get new mail.

  #+BEGIN_SRC emacs-lisp
    (setq mu4e-get-mail-command "mbsync -a")
  #+END_SRC

  MBSync, in contrast to OfflineIMAP, apparently needs this option to work properly!

  #+BEGIN_SRC emacs-lisp
    (setq mu4e-change-filenames-when-moving t)
  #+END_SRC

  Set up different contexts based on which folder / mailbox I'm in. This is
  much more obvious than Gnus' approach, IMO. I like it.

  #+BEGIN_SRC emacs-lisp
    (require 's) ;; Used by my :match-funcs

    (defun get-string-from-file (filePath)
      "Return filePath's file content."
      (with-temp-buffer
        (insert-file-contents filePath)
        (buffer-string)))

    (defun my-emacs-org-sig ()
      (concat "; " (car (split-string (emacs-version) " ("))
              ", " (car (split-string (org-version nil t) " ("))))

    (setq mu4e-contexts
          `(,(make-mu4e-context
              :name "Private"
              :enter-func (lambda () (mu4e-message "Switch to the Private context"))
              ;; leave-func not defined
              :match-func (lambda (msg)
                            (when msg
                              (s-starts-with-p "/Private/"
                                               (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "stig@brautaset.org")

                      (mu4e-sent-folder . "/Private/sent")
                      (mu4e-drafts-folder . "/Private/drafts")
                      (mu4e-trash-folder .  "/Private/trash")
                      (mu4e-refile-folder . "/Private/Archive")
                      (mu4e-sent-messages-behavior . sent)
                      (mu4e-compose-signature . (my-emacs-org-sig))))


            ,(make-mu4e-context
              :name "Work"
              :enter-func (lambda () (mu4e-message "Switch to the Work context"))
              ;; leave-fun not defined
              :match-func (lambda (msg)
                            (when msg
                              (s-starts-with-p "/Work/"
                                               (mu4e-message-field msg :maildir))))
              :vars '((user-mail-address . "sbrautaset@laterpay.net")

                      (mu4e-sent-folder . "/Work/sent")
                      (mu4e-drafts-folder . "/Work/drafts")
                      (mu4e-trash-folder .  "/Work/trash")
                      (mu4e-refile-folder . "/Work/Archive")
                      (mu4e-sent-messages-behavior . delete)
                      (mu4e-compose-signature . (get-string-from-file "~/CloudDocs/LaterPay.signature"))))))

    (setq mu4e-context-policy 'ask)
  #+END_SRC

  A list of my addresses.

  #+BEGIN_SRC emacs-lisp
    (setq mu4e-user-mail-address-list
          '("stig@brautaset.org"
            "sbrautaset@laterpay.net"
            "stig.brautaset@icloud.com"))
  #+END_SRC

  Tell mu4e that I don't want to email myself, normally.

  #+BEGIN_SRC emacs-lisp
  (setq mu4e-compose-dont-reply-to-self t)
  #+END_SRC

  Configure mu4e to support queueing mail for sending later, for cases when I
  don't have network connection.

  #+BEGIN_SRC emacs-lisp
      (setq smtpmail-queue-mail nil
          smtpmail-queue-dir   "~/Maildir/queue/cur")
  #+END_SRC

  This requires creating the queue directory, which you can do with =mu=. We
  also tell mu not to index the queue:

  #+BEGIN_SRC sh
  mu mkdir ~/Maildir/queue
  touch ~/Maildir/queue/.noindex
  #+END_SRC

* Reflow mail using soft linebreaks

#+BEGIN_SRC emacs-lisp
  ;; tip submitted by mu4e user cpbotha
  (add-hook 'mu4e-compose-mode-hook
            (lambda ()
              (use-hard-newlines t 'always)))
#+END_SRC

* Sending Mail

  Set up defaults for sending email.

  #+BEGIN_SRC emacs-lisp
    (setq send-mail-function 'smtpmail-send-it
          message-send-mail-function 'smtpmail-send-it
          starttls-extra-arguments nil
          smtpmail-smtp-service 587
          smtpmail-debug-info t)
  #+END_SRC

  List of sender addresses and SMTP servers.

  #+BEGIN_SRC emacs-lisp
    (setq smtp-accounts
          '(("stig@brautaset.org" "mailbox@brautaset.org" "mail.gandi.net")
            ("sbrautaset@laterpay.net" "sbrautaset@laterpay.ag" "smtp.gmail.com")))
  #+END_SRC

  A function to change the active SMTP server based on the sender address.
  (This is heavily inspired by [[http://www.mostlymaths.net/2010/12/emacs-30-day-challenge-using-gnus-to.html][emacs 30 day challenge: using gnus]].)

  #+BEGIN_SRC emacs-lisp
    (defun change-smtp (recipient smtpmail-text-buffer &rest ask-for-password)
      "Change the SMTP server & user according to current sender"

      (save-excursion
        (loop with from = (save-restriction
                            (message-narrow-to-headers)
                            (message-fetch-field "from"))
              for (address smtp-user smtp-server) in smtp-accounts
              when (string-match address from)
              do (progn
                   (message "Setting SMTP server to %s for user %s"
                            smtp-server smtp-user)
                   (setq smtpmail-smtp-user smtp-user
                         smtpmail-smtp-server smtp-server)))))
  #+END_SRC

  Add the `change-smtp' function as a "before advice" to the /real/ function
  to send mail via smpt. This causes `change-smtp' to be called immediately
  before the advised function, with the same arguments.

  #+BEGIN_SRC emacs-lisp
    (advice-add #'smtpmail-via-smtp
                :before
                #'change-smtp)
  #+END_SRC

* Composing

  Add a function to cycle between from addresses in the message buffer.
  Credit to [[https://www.emacswiki.org/emacs/GnusTutorial][GnusTutorial]] which is where I found the example I adopted this
  from.

  #+BEGIN_SRC emacs-lisp
    (setq my-email-addresses (mapcar (lambda (lst) (car lst) ) smtp-accounts))
    (setq message-alternative-emails
          (regexp-opt my-email-addresses))

    (setq message-from-selected-index 0)
    (defun message-loop-from ()
      (interactive)
      (setq message-article-current-point (point))
      (goto-char (point-min))
      (if (eq message-from-selected-index (length my-email-addresses))
          (setq message-from-selected-index 0) nil)
      (while (re-search-forward "^From:.*$" nil t)
        (replace-match (concat "From: " user-full-name " <" (nth message-from-selected-index my-email-addresses) ">")))
      (goto-char message-article-current-point)
      (setq message-from-selected-index (+ message-from-selected-index 1)))

    (add-hook 'message-mode-hook
              (lambda ()
                (define-key message-mode-map "\C-c\C-f\C-f" 'message-loop-from)))
  #+END_SRC

  Install boxquote to make fancy text boxes like this:

  #+BEGIN_EXAMPLE
    ,----
    | This is a box quote!
    `----
  #+END_EXAMPLE

  You can even set a title!

  #+BEGIN_EXAMPLE
    ,----[ with a title! ]
    | This is another box quote
    `----
  #+END_EXAMPLE

  #+BEGIN_SRC emacs-lisp
    (use-package boxquote :ensure t)
  #+END_SRC

* Integration with Org mode

  I want to be able to create links to messages from Org mode capture
  templates, as email Inbox is a terrible TODO list.

  #+BEGIN_SRC emacs-lisp
    (use-package org-mu4e
      :config

      (add-hook 'message-mode-hook 'org-mu4e-compose-org-mode))
  #+END_SRC

  Not only that, but I want to be able to create MIME HTML mail based on
  org-formatted source. There's a package for that too, of course.

  #+BEGIN_SRC emacs-lisp
    (use-package org-mime
      :config
      (add-hook 'message-mode-hook
                (lambda ()
                  (local-set-key "\C-ch" 'org-mime-htmlize))))
  #+END_SRC
