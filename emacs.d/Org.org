#+TITLE: Org Mode
#+AUTHOR: Stig Brautaset
#+OPTIONS: f:t h:4
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+PROPERTY: header-args:sh         :tangle yes
#+PROPERTY: header-args            :results silent
* Introduction

  I now use Org mode for all writing I initiate. The Emacs org mode's support
  for tables, TOC, footnotes, TODO and agenda items makes it an easy choice.
  Gists and GitHub READMEs support Org mode too, and I can export to other
  formats including if I want.

  To avoid having one gigantic section, this file uses NOWEB syntax to weave
  together config snippets.

  The particular version of package I use is annoying to install because the
  installed package has a different name from what you would use in your
  config. However, =use-package= supports this by passing the name of the
  package to install as the value to =:ensure=.

  #+BEGIN_SRC emacs-lisp :noweb yes
    (use-package org
      :ensure org-plus-contrib
      <<key-bindings>>

      :init
      <<capturing>>
      <<refiling>>

      ;; When hitting C-c C-z to take a note, always put it in the LOGBOOK drawer
      (setq org-log-into-drawer t)

      ;; If a gmane or google groups link is present, prefer that.
      ;; Get a Gnus link with `C-u C-c l'.
      (setq org-gnus-prefer-web-links t)

      ;; Sometimes I accidentally edit non-visible parts of org document. This
      ;; helps, apparently.
      (setq org-catch-invisible-edits t)

      ;; Don't execute code blocks during export
      (setq org-export-babel-evaluate nil)

      ;; Tell Org where to find ditaa jar
      (setq org-ditaa-jar-path (-last-item (directory-files "/usr/local/opt/ditaa/libexec" t)))

      ;; Always include stderr output for shell
      (setq org-babel-default-header-args:sh
            '((:prologue . "exec 2>&1")
              (:epilogue . ":")))


      ;; If running interactively, I want export to copy to the kill-ring
      (setq org-export-copy-to-kill-ring 'if-interactive)

      :config
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (clojure . t)
         (python . t)
         (ditaa . t)
         (applescript . t)
         (dot . t)
         (sql . t)
         (shell . t)))

      (add-hook 'org-mode-hook 'auto-fill-mode nil t))
  #+END_SRC

  Ditaa requires a package installed by brew.

  #+BEGIN_SRC sh
    brew install ditaa
  #+END_SRC

* Key bindings

  The Org manual expects the top four of these to be available in any mode, so
  define them globally. I prefer to follow conventions. It makes reading the
  manual and tutorials a lot easier!

  #+name: key-bindings
  #+BEGIN_SRC emacs-lisp :tangle no
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           ("C-c b" . org-iswitchb)
           :map org-mode-map
           ("C-n" . org-next-link)
           ("C-p" . org-previous-link))
  #+END_SRC

* Refiling

  I got all of this from [[https://www.youtube.com/watch?v=ECWtf6mAi9k][this YouTube video]].

  #+name: refiling
  #+BEGIN_SRC emacs-lisp :tangle no
      (setq org-refile-targets '((org-agenda-files :level . 1)))
      (setq org-refile-use-outline-path 'file)
      (setq org-refile-allow-creating-parent-nodes 'confirm)
  #+END_SRC

* Capturing

  Set up capture templates. This is mainly from [[http://koenig-haunstetten.de/2014/08/29/the-power-of-orgmode-capture-templates/][Rainer's blog post]]. No doubt
  this will grow...

  #+name: capturing
  #+BEGIN_SRC emacs-lisp :tangle no
    (setq org-capture-templates
          '(("t" "TODO Entry" entry (file+headline "Agenda.org" "Capture")
             (file "tpl-todo.org") :empty-lines-before 1)
            ("p" "Project" entry (file+headline "Agenda.org" "Capture")
             (file "tpl-proj.org") :empty-lines-before 1)
            ("b" "Blog Post" entry (file+headline "Agenda.org" "Blog")
             (file "tpl-blog-post.org") :empty-lines-before 1)
            ("l" "Logbook Entry" entry (file+datetree "Log.org")
             (file "tpl-logbook.org"))
            ("n" "New Starter" entry (file+headline "Agenda.org" "Capture")
             (file "tpl-new-starter.org") :empty-lines-before 1)
            ("i" "New Invoice" plain (file "LaterPay-Invoices.org") (file "tpl-laterpay-invoice.org"))))
  #+END_SRC

* Org Babel

  I wrote a module for executing AppleScript from Babel. Let's install it, so
  we can make sure it works.

  #+BEGIN_SRC emacs-lisp
    (use-package ob-applescript
      :ensure t)
  #+END_SRC

* Org Export

  I hate writing JIRA markup, so I wrote a JIRA export backend for Org mode.

  #+BEGIN_SRC emacs-lisp
    (use-package ox-jira
      :ensure t)
  #+END_SRC

  I'm not that fond of writing Markdown either. I don't feel the need to
  install these by default, but I load them if they are present.

  #+BEGIN_SRC emacs-lisp
    (use-package ox-md)
  #+END_SRC

* Presenting

  Let's try presenting with Emacs.

  #+BEGIN_SRC emacs-lisp
    (use-package org-tree-slide
      :bind (("<f8>" . org-tree-slide-mode)
             ("S-<f8>" . org-tree-slide-skip-done-toggle)

             :map org-tree-slide-mode-map
             ("<f7>" . org-tree-slide-move-previous-tree)
             ("<f8>" . org-tree-slide-mode)
             ("<f9>" . org-tree-slide-move-next-tree)
             ("<f12>" . org-tree-slide-content)))
  #+END_SRC

* Passwords

  #+BEGIN_SRC emacs-lisp
    (use-package org-passwords
      :init

      (setq org-passwords-time-opened "30 min")

      ;; Where's my passwords file?
      (setq org-passwords-file "~/Org/passwords.org.gpg")

      ;; Use completion for org elements
      (setq org-completion-use-ido t)

      :bind (("C-c P P" . org-passwords)
             ("C-c P g" . org-passwords-generate-password)
             :map org-passwords-mode-map
             ("C-c C-c u" . org-passwords-copy-username)
             ("C-c C-c p" . org-passwords-copy-password)))
  #+END_SRC
